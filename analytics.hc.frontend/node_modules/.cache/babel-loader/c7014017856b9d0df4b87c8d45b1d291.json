{"ast":null,"code":"var _jsxFileName = \"/Users/aniquedavla/Projects/analytics.hc/analytics.hc.frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Title from './Title';\nimport CommunityData from './CommunityData';\nimport WorkingTest from './WorkingTest';\nimport Dashboard from './Components/Dashboard'; // import Dashboard from './Dashboard';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      communities: [],\n      highLevelData: {},\n      isLoaded: false\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      let [communities, highLevelData] = await Promise.all([await fetch('http://my-json-server.typicode.com/aniquedavla/demo/communities').then(response => response.json()).then(json => this.setState({\n        communities: json,\n        isLoaded: true\n      })), await fetch('http://my-json-server.typicode.com/aniquedavla/demo/highLevelData').then(response => response.json()).then(highLevelJson => this.setState({\n        highLevelData: highLevelJson,\n        isLoaded: true\n      }))]); // ReactDOM.render(\n      //   <Test items={items} contactlist={contactlist} itemgroup={itemgroup} />,\n      //     document.getElementById('overview');\n      // );\n    } catch (err) {\n      console.log(err);\n    }\n\n    ; // fetch('http://my-json-server.typicode.com/aniquedavla/demo/communities')\n    //     .then(response => response.json())\n    //     .then(json => this.setState({\n    //         communities: json,\n    //         isLoaded: true\n    //     }));\n    // fetch('http://my-json-server.typicode.com/aniquedavla/demo/highLevelData')\n    // .then(response => response.json())\n    // .then(highLevelJson => this.setState({\n    //     highLevelData: highLevelJson,\n    //     isLoaded: true\n    // }));\n  }\n\n  render() {\n    let {\n      isLoaded,\n      communities,\n      highLevelData\n    } = this.state;\n    console.log(this.state);\n\n    if (isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(BrowserRouter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Switch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        path: \"/\",\n        component: WorkingTest,\n        exact: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/dashboard\",\n        component: () => /*#__PURE__*/React.createElement(Dashboard, {\n          communities: (communities, highLevelData),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 55\n          }\n        }),\n        exact: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }\n      }))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      }, \"Loading community data...\"));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/aniquedavla/Projects/analytics.hc/analytics.hc.frontend/src/App.js"],"names":["React","Component","BrowserRouter","Route","Switch","Title","CommunityData","WorkingTest","Dashboard","App","constructor","props","state","communities","highLevelData","isLoaded","componentDidMount","Promise","all","fetch","then","response","json","setState","highLevelJson","err","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport Title from './Title';\nimport CommunityData from './CommunityData';\nimport WorkingTest from './WorkingTest';\nimport Dashboard from './Components/Dashboard';\n// import Dashboard from './Dashboard';\n\n\nclass App extends Component {\n  constructor(props){\n        super(props)\n        this.state = {\n            communities:[],\n            highLevelData:{},\n            isLoaded:false\n        }\n  }\n\n  async componentDidMount(){\n    try {\n      let [communities, highLevelData] = await Promise.all([\n          await fetch('http://my-json-server.typicode.com/aniquedavla/demo/communities')\n          .then(response => response.json())\n          .then(json => this.setState({\n              communities: json,\n              isLoaded: true\n          })),\n          await fetch('http://my-json-server.typicode.com/aniquedavla/demo/highLevelData')\n          .then(response => response.json())\n          .then(highLevelJson => this.setState({\n            highLevelData: highLevelJson,\n            isLoaded: true\n        }))\n      ]);\n    \n      // ReactDOM.render(\n      //   <Test items={items} contactlist={contactlist} itemgroup={itemgroup} />,\n      //     document.getElementById('overview');\n      // );\n    }\n    catch(err) {\n      console.log(err);\n    };\n    \n      // fetch('http://my-json-server.typicode.com/aniquedavla/demo/communities')\n      //     .then(response => response.json())\n      //     .then(json => this.setState({\n      //         communities: json,\n      //         isLoaded: true\n      //     }));\n      // fetch('http://my-json-server.typicode.com/aniquedavla/demo/highLevelData')\n      // .then(response => response.json())\n      // .then(highLevelJson => this.setState({\n      //     highLevelData: highLevelJson,\n      //     isLoaded: true\n      // }));\n  }\n  render(){\n    let {isLoaded, communities, highLevelData} = this.state\n    console.log(this.state);\n    if(isLoaded){\n      return (\n        <div className=\"App\">\n          <BrowserRouter>\n            <Switch>\n              <Route path=\"/\" component={WorkingTest} exact />\n              <Route path=\"/dashboard\" component={()=><Dashboard communities={communities, highLevelData}></Dashboard>} exact />\n            </Switch> \n          </BrowserRouter>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n        <div>Loading community data...</div>\n          {/* <BrowserRouter>\n            <Switch>\n              <Route path=\"/\" component={WorkingTest} exact />\n              <Route path=\"/dashboard\" component={Dashboard} exact />\n            </Switch>\n          </BrowserRouter> */}\n        </div>\n      );\n    }\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}